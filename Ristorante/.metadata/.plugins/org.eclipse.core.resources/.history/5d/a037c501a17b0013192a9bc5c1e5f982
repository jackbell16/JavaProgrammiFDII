package userpanel;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JTextArea;

import utils.CassaPizzeria;
import utils.RistorantePizzeria;

public class MenuPizzeria extends JMenuBar {
	static int quantità = 0;
	static String newLine = "\n";
	final static RistorantePizzeria pizzeria = new RistorantePizzeria();
	final static ArrayList<JMenuItem> jMenuItemsPizze = new ArrayList<>();
	final static ArrayList<JMenuItem> jMenuteItemsQuantità = new ArrayList<>();
	final static CassaPizzeria cassaPizzeria = new CassaPizzeria();
	final static JTextArea area = new JTextArea();
	
	public MenuPizzeria() {
		super();
		JMenuBar jMenuBar = new JMenuBar();
		JMenu menu = new JMenu("Seleziona quantità");
		JMenu menu2 = new JMenu("Seleziona pizza");
		inserisciJMenuteItemQuantità();
		inserisciJMenuItemPizze();
		impostaMenuQuantità(menu);
		impostaMenuPizze(menu2);	
		jMenuBar.add(menu);
		jMenuBar.add(menu2);
		selezionaMenuQuantità(0);
		selezionaMenuQuantità(1);
		selezionaMenuQuantità(2);
		selezionaMenuQuantità(3);
		impostaSelezionaPizze();
	}

	private static void selezionaPizzaMenu(final int i) {
		jMenuItemsPizze.get(i).addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				area.append(quantità+" x "+pizzeria.getListaPizze().get(i).toString()+" = "+calcolaRisultatoParziale(i)+ " Euro");
				area.append(newLine);
				cassaPizzeria.aggiungiProdotti(pizzeria.getListaPizze().get(i), quantità);
			}
		});
	}
	
	private static double calcolaRisultatoParziale(int idexPizza){
		return quantità*pizzeria.getListaPizze().get(idexPizza).getPrezzo();
	}
	
	private static void impostaSelezionaPizze() {
		for (int i = 0; i < jMenuItemsPizze.size(); i++) {
			selezionaPizzaMenu(i);
		}
	}
	private static void inserisciJMenuteItemQuantità() {
		for (int i = 1; i < 5; i++) {
			JMenuItem jMenuItem = new JMenuItem(i+"x");
			jMenuteItemsQuantità.add(jMenuItem);
		}
	}

	private static void impostaMenuQuantità(JMenu menu) {
		for (int i = 0; i < 4; i++) {
			menu.add(jMenuteItemsQuantità.get(i));
		}
	}

	private static void selezionaMenuQuantità(final int i) {
		jMenuteItemsQuantità.get(i).addActionListener(new ActionListener() {
		@Override
		public void actionPerformed(ActionEvent e) {
			quantità = i+1;
		}
});
	}

	private static void impostaMenuPizze(JMenu menu2) {
		for (int i = 0; i < jMenuItemsPizze.size(); i++) {
			menu2.add(jMenuItemsPizze.get(i));
		}
	}

	private static void inserisciJMenuItemPizze() {
		for (int i = 0; i < pizzeria.getListaPizze().size(); i++) {
			JMenuItem jMenuItem = new JMenuItem(pizzeria.getListaPizze().get(i).toString());
			jMenuItemsPizze.add(jMenuItem);
		}
	}
}
